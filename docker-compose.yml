version: '3.8'

services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    volumes:
      - .:/app
    networks:
      - app-network
    restart: unless-stopped
    ports:
      - "3000:3000"

  backend:
    build:
      context: ./
      dockerfile: Dockerfile.backend
    volumes:
      - .:/app
      - /app/__pycache__
      - /app/**/__pycache__
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - FLASK_APP=app.py
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - FLASK_RUN_PORT=5001
      - FORCE_OCR=true
      - PYTHONUNBUFFERED=1
      - WORKERS=4
      - THREADS=2
      - TIMEOUT=120
    env_file:
      - .env
    networks:
      - app-network
    depends_on:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${DOMAIN}:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "5001:5001"

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=${EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json:ro
    networks:
      - app-network
    depends_on:
      - postgres
    restart: unless-stopped
    ports:
      - "5050:80"
networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data:
