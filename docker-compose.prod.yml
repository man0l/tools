version: '3.8'

services:
  traefik:
    image: traefik:v2.10
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      # HTTP to HTTPS redirect
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    networks:
      - app-network
    restart: unless-stopped

  frontend:
    image: ghcr.io/man0l/tools:frontend-latest
    labels:
      - "traefik.enable=true"
      # Make the frontend explicitly handle non-api routes
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN}`) && !PathPrefix(`/api`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      - app-network
    restart: unless-stopped

  backend:
    image: ghcr.io/man0l/tools:backend-latest
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - NODE_ENV=production
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - WORKERS=4
      - THREADS=2
      - TIMEOUT=120
      - FLASK_RUN_PORT=5001
    env_file:
      - .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend-api.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend-api.entrypoints=websecure"
      - "traefik.http.routers.backend-api.tls.certresolver=myresolver"
      - "traefik.http.services.backend-api.loadbalancer.server.port=5001"
      # This middleware strips the /api prefix before forwarding to Flask
      - "traefik.http.middlewares.strip-api-prefix.stripprefix.prefixes=/api"
      - "traefik.http.routers.backend-api.middlewares=strip-api-prefix@docker"
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s


  watchtower:
    image: containrrr/watchtower
    environment:
      - REPO_USER=man0l
      - REPO_PASS=${GH_TOKEN}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - "--label-enable"
      - "--interval"
      - "30"
      - "--rolling-restart"
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
